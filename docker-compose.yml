version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: turismo_rs_web
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/api/node_modules
      - /app/packages/db/node_modules
      - /app/packages/ui/node_modules
      - /app/packages/eslint-config-custom/node_modules
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
    command: bun run dev

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: turismo_rs_api
    ports:
      - "4000:4000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
    command: bun run dev

  db:
    image: postgres:16-alpine
    container_name: turismo_rs_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-turismo_rs}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-turismo_rs}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
